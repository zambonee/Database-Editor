using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace DatabaseEditorV3
{
    /// <summary>
    /// Interaction logic for PreviewImportWizard.xaml
    /// </summary>
    public partial class PreviewImportWizard : Window
    {
        private MatchedColumn[] columns;

        public PreviewImportWizard(MatchedColumn[] columns, ImportWizardContext context)
        {
            this.columns = columns;
            DataContext = context;
            InitializeComponent();
        }

        /// <summary>
        /// Have to set AutoGenerateColumns to true to get to the AutoGeneratedColumn event handler, but have to cancel AutoGeneratingColumn so that it does not create columns of other item properties.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            e.Cancel = true;
        }

        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid grid = sender as DataGrid;
            foreach (MatchedColumn c in columns)
            {
                // Enclose the Binding name in square brackets to escape special characters (eg. square brackets) in the binding string.
                string cleanedName = $"[{c.DatabaseColumn.Value}]";
                DataGridTextColumn column = new DataGridTextColumn()
                {
                    Header = c.DatabaseColumn.Display,
                    Binding = new Binding(cleanedName)
                    {
                        UpdateSourceTrigger = UpdateSourceTrigger.LostFocus,
                        TargetNullValue = ""
                    },
                    SortMemberPath = (string)c.DatabaseColumn.Value
                };
                grid.Columns.Add(column);
            }
        }

        private void Test_Click(object sender, RoutedEventArgs e)
        {
            SaveToDatabase(true);
        }

        private void Save_Click(object sender, RoutedEventArgs e)
        {
            SaveToDatabase(false);
        }

        /// <summary>
        /// Test all of the rows with a rollback transaction. Then, if it is not a test and all rows are valid, commit the transactions.
        /// </summary>
        private void SaveToDatabase(bool isTest)
        {
            bool result = ((ImportWizardContext)DataContext).MakeDatabaseChanges(true);
            if (!result)
            {
                MessageBox.Show("No rows were added or changed to the database. Hover your mouse over the red rows to view each row-specific error message.");
                return;
            }
            else if (isTest)
            {
                result = ((ImportWizardContext)DataContext).MakeDatabaseChanges(false);
            }
            if (result)
            {
                if (isTest)
                {
                    MessageBox.Show("All rows were successfully tested. No changes were made to the database.");
                }
                else
                {
                    MessageBox.Show("All rows were succefully migrated to the database.");
                    Close();
                }
            }
        }

    }
}
